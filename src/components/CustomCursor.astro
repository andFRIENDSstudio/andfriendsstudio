---
// CustomCursor.astro - Pure vanilla JS, no React needed
---

<div class="cursor-trail-container">
  <div class="cursor-trail" data-color="#F03929"></div>
  <div class="cursor-trail" data-color="#FFBEEE"></div>
  <div class="cursor-trail" data-color="#5522A8"></div>
  <div class="cursor-trail" data-color="#0C4AE5"></div>
  <div class="cursor-trail" data-color="#02C779"></div>
  <div class="cursor-trail" data-color="#E3F608"></div>
  <div class="cursor-trail" data-color="#FF9200"></div>
</div>

<div class="custom-cursor">
  <div class="cursor-content">
    <div class="cursor-text-wrapper">
      <div class="cursor-text"></div>
    </div>
  </div>
</div>

<style>
  *, *::before, *::after {
    cursor: none !important;
  }
  
  html, body {
    cursor: none !important;
  }
  
  .cursor-trail-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 9998;
  }
  
  .cursor-trail {
    position: fixed;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    pointer-events: none;
    transform: translate(-50%, -50%);
    opacity: 0.7;
    transition: opacity 0.3s ease;
  }
  
  .cursor-trail-container.hidden {
    opacity: 0;
  }
  
  .custom-cursor {
    position: fixed;
    pointer-events: none;
    z-index: 9999;
    border: 2px solid #fff;
    border-radius: 9999px;
    display: flex;
    align-items: center;
    justify-content: center;
    transform: translate(-50%, -50%);
    width: 12px;
    height: 12px;
    background-color: #fff;
    overflow: hidden;
  }
  
  .custom-cursor.pill-state {
    mix-blend-mode: normal;
  }
  
  .cursor-content {
    color: #fff;
    font-size: 14px;
    text-align: center;
    padding: 0 12px;
    white-space: nowrap;
    opacity: 0;
    line-height: 1.3;
    width: 100%;
    overflow: hidden;
  }
  
  .cursor-text-wrapper {
    width: 100%;
    overflow: hidden;
  }
  
  .cursor-text {
    display: inline-block;
    white-space: nowrap;
  }
  
  .cursor-text.scrolling {
    animation: marquee 8s linear infinite;
  }
  
  @keyframes marquee {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }
  
  .cursor-text strong {
    font-weight: 600;
  }

  @media (max-width: 768px) {
    .cursor-trail-container,
    .custom-cursor {
      display: none;
    }
    * {
      cursor: auto !important;
    }
  }
</style>

<script>
  import gsap from 'gsap';

  const cursor = document.querySelector('.custom-cursor');
  const content = document.querySelector('.cursor-content');
  const textWrapper = document.querySelector('.cursor-text-wrapper');
  const textElement = document.querySelector('.cursor-text');
  const trailContainer = document.querySelector('.cursor-trail-container');
  const trailElements = document.querySelectorAll('.cursor-trail');
  
  let mouseX = 0;
  let mouseY = 0;
  let cursorState = 'default';

  // Set colors for trail elements
  trailElements.forEach((trail, index) => {
    const color = trail.getAttribute('data-color');
    trail.style.backgroundColor = color;
  });

  // Smooth cursor follow
  const moveCursor = (e) => {
    mouseX = e.clientX;
    mouseY = e.clientY;
  };

  const animateCursor = () => {
    gsap.to(cursor, {
      x: mouseX,
      y: mouseY,
      duration: 0.3,
      ease: 'power2.out'
    });
    
    // Animate trail with increasing delays
    trailElements.forEach((trail, index) => {
      gsap.to(trail, {
        x: mouseX,
        y: mouseY,
        duration: 0.5 + (index * 0.08), // Each trail element lags more
        ease: 'power2.out'
      });
    });
    
    requestAnimationFrame(animateCursor);
  };

  // Check if text needs scrolling
  const checkTextScroll = () => {
    // Small delay to let the width settle, then check
    setTimeout(() => {
      if (textElement.scrollWidth > textWrapper.clientWidth) {
        // Text is too long, enable marquee
        textElement.classList.add('scrolling');
        // Duplicate text for seamless loop
        const originalHTML = textElement.innerHTML;
        textElement.innerHTML = originalHTML + ' • ' + originalHTML;
      } else {
        textElement.classList.remove('scrolling');
      }
    }, 50);
  };

  // State change handler
  const setCursorState = (state, projectInfo = null) => {
    if (state === 'default') {
      cursor.classList.remove('pill-state');
      trailContainer.classList.remove('hidden');
      gsap.to(cursor, {
        width: 12,
        height: 12,
        borderWidth: 0,
        backgroundColor: '#fff',
        duration: 0.3,
        ease: 'power2.out'
      });
      gsap.to(content, { opacity: 0, duration: 0.2 });
      textElement.classList.remove('scrolling');
      // Reset text to single copy
      const textContent = textElement.textContent;
      if (textContent.includes(' • ')) {
        textElement.innerHTML = textContent.split(' • ')[0];
      }
    } 
    else if (state === 'link') {
      cursor.classList.remove('pill-state');
      trailContainer.classList.remove('hidden');
      gsap.to(cursor, {
        width: 40,
        height: 40,
        borderWidth: 2,
        backgroundColor: 'transparent',
        duration: 0.3,
        ease: 'power2.out'
      });
      gsap.to(content, { opacity: 0, duration: 0.2 });
    } 
    else if (state === 'pill' && projectInfo) {
      cursor.classList.add('pill-state');
      trailContainer.classList.add('hidden'); // Hide trail in pill state
      textElement.innerHTML = `<strong>${projectInfo.name}</strong>${projectInfo.attribution}`;
      
      // Check for scroll BEFORE animating opacity
      checkTextScroll();
      
      gsap.to(cursor, {
        width: 280,
        height: 60,
        borderWidth: 2,
        backgroundColor: '#000',
        duration: 0.4,
        ease: 'power3.out'
      });
      gsap.to(content, { opacity: 1, duration: 0.3, delay: 0.1 });
    }
    cursorState = state;
  };

  // Event handlers
  const handleLinkEnter = () => setCursorState('link');
  const handleLinkLeave = () => setCursorState('default');

  const handleImageEnter = (e) => {
    const target = e.currentTarget;
    const projectTitle = target.dataset.project || 'Project Name';
    const contributors = target.dataset.contributors ? target.dataset.contributors.split(', ') : [];
    const year = target.dataset.year || '2024';
    
    // Determine attribution: solo = name, collab = year
    let attribution = '';
    if (contributors.length === 1) {
      attribution = ` • ${contributors[0]}`;
    } else {
      attribution = ` • ${year}`;
    }
    
    const projectInfo = {
      name: projectTitle,
      attribution: attribution
    };
    setCursorState('pill', projectInfo);
  };

  const handleImageLeave = () => setCursorState('default');

  // Initialize
  document.addEventListener('mousemove', moveCursor);
  animateCursor();

  // Attach to links
  const links = document.querySelectorAll('a');
  links.forEach(link => {
    link.addEventListener('mouseenter', handleLinkEnter);
    link.addEventListener('mouseleave', handleLinkLeave);
  });

  // Attach to marquee images
  const images = document.querySelectorAll('.grey-box');
  images.forEach(img => {
    img.addEventListener('mouseenter', handleImageEnter);
    img.addEventListener('mouseleave', handleImageLeave);
  });
</script>