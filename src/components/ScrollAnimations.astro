---
// ScrollAnimations.astro - Desktop scroll animations + text reveals + mobile logo intro
---

<script>
    import gsap from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    import Lenis from 'lenis';
    
    gsap.registerPlugin(ScrollTrigger);

    // Use matchMedia for dynamic desktop/mobile detection
    const mediaQuery = window.matchMedia('(min-width: 769px)');
    let isDesktop = mediaQuery.matches;

    // AGGRESSIVE scroll reset - fire immediately and on load
    const resetScroll = () => {
        if ('scrollRestoration' in window.history) {
            window.history.scrollRestoration = 'manual';
        }
        document.documentElement.scrollTop = 0;
        document.body.scrollTop = 0;
        window.scrollTo(0, 0);
    };
    
    // Fire immediately
    resetScroll();
    
    // Fire on page show (catches back/forward navigation)
    window.addEventListener('pageshow', resetScroll);
    
    // Fire on load
    window.addEventListener('load', resetScroll);

    // Wait for DOM to be ready for animations
    document.addEventListener('DOMContentLoaded', () => {
        console.log('DOMContentLoaded fired. isDesktop:', isDesktop, 'mediaQuery.matches:', mediaQuery.matches);
        if (isDesktop) {
        // Calculate marquee dimensions first
        const track = document.querySelector('.marquee-track');
        
        // ========================================
        // TIMING CONFIGURATION - Adjust these to tune animations
        // ========================================
        const TIMING = {
            // Scroll scrub values (higher = smoother/floatier, lower = snappier)
            logoScrub: 3,
            marqueeScrub: 3,
            
            // Logo clip path animation
            clipDuration: 1.2,
            clipTriggerPoint: 0.25, // 0-1, when during logo shrink it triggers (0.25 = 25% through)
            clipEase: 'power2.inOut',
            
            // Entry animation on page load
            entryDuration: 1.5,
            entryDelay: 0,
            entryEase: 'power2.out',
        };
        // ========================================
        
        // ========================================
        // TEXT REVEAL ANIMATIONS (DESKTOP ONLY)
        // Start at same time as logo animation (delay 0)
        // ========================================
        const textStartDelay = TIMING.entryDelay;
        
        // Split about copy into words
        const aboutCopy = document.querySelector('.about-copy');
        if (aboutCopy) {
            const text = aboutCopy.textContent;
            const words = text.split(' ');
            aboutCopy.innerHTML = words.map(word => 
                `<span style="display: inline-block; overflow: hidden;">
                    <span style="display: inline-block;">${word}</span>
                </span> `
            ).join('');
            
            const wordSpans = aboutCopy.querySelectorAll('span > span');
            gsap.set(wordSpans, { x: -20, opacity: 0 });
            gsap.to(wordSpans, {
                x: 0,
                opacity: 1,
                duration: 0.6,
                stagger: 0.025,
                ease: 'power2.out',
                delay: textStartDelay
            });
        }
        
        // Links - animate from left
        const links = document.querySelectorAll('.links a');
        if (links.length) {
            gsap.set(links, { x: -20, opacity: 0 });
            gsap.to(links, {
                x: 0,
                opacity: 1,
                duration: 0.6,
                stagger: 0.05,
                ease: 'power2.out',
                delay: textStartDelay
            });
        }
        
        // Footer - animate from right
        const footerItems = document.querySelectorAll('.footer-bar > div');
        if (footerItems.length) {
            gsap.set(footerItems, { x: 20, opacity: 0 });
            gsap.to(footerItems, {
                x: 0,
                opacity: 1,
                duration: 0.6,
                stagger: 0.075,
                ease: 'power2.out',
                delay: textStartDelay
            });
        }
        
        // Function to recalculate on resize
        function setupAnimations() {
            // Kill existing ScrollTriggers to refresh
            ScrollTrigger.getAll().forEach(st => st.kill());
            
            const trackWidth = track.scrollWidth;
            const viewportWidth = window.innerWidth;
            const paddingRight = viewportWidth * 0.05;
            const totalDistance = trackWidth - viewportWidth + paddingRight;

            // RESPONSIVE: Scale page height based on viewport width
            const basePageHeight = 600;
            const viewportScale = viewportWidth / 1920;
            const pageHeight = basePageHeight * Math.max(0.7, viewportScale);
            
            document.body.style.minHeight = `${pageHeight}vh`;

            // ADAPTIVE TIMING: Wider screens = more overlap, narrower = less overlap
            const widthRatio = Math.min(Math.max(viewportWidth / 1920, 0.5), 1);
            
            const logoShrinkEnd = pageHeight * gsap.utils.interpolate(0.75, 0.65, widthRatio);
            // Marquee starts at same time as logo shrink
            const marqueeStart = 0;

            // Logo scale - scrubs with scroll
            const logoTimeline = gsap.timeline({
                scrollTrigger: {
                    trigger: 'body',
                    start: 'top top',
                    end: `${logoShrinkEnd}vh top`,
                    scrub: TIMING.logoScrub,
                    invalidateOnRefresh: true,
                }
            });

            // ADAPTIVE SCALE: Smaller viewports = less shrinking
            const targetScale = gsap.utils.interpolate(0.8, 0.45, widthRatio);

            logoTimeline.to('.logo-container', {
                scale: targetScale,
                ease: 'none',
            });

            // Logo clip path - triggers at a point, then animates independently
            gsap.to('.logo-container', {
                clipPath: 'inset(0 85% 0 0)',
                duration: TIMING.clipDuration,
                ease: TIMING.clipEase,
                scrollTrigger: {
                    trigger: 'body',
                    start: `${logoShrinkEnd * TIMING.clipTriggerPoint}vh top`,
                    end: `${logoShrinkEnd * TIMING.clipTriggerPoint + 10}vh top`,
                    toggleActions: 'play none reverse none',
                    invalidateOnRefresh: true,
                }
            });

            // SCROLL HINT clip path - same timing as logo (only if element exists)
            const scrollHint = document.querySelector('.scroll-hint');
            if (scrollHint) {
                gsap.to('.scroll-hint', {
                    clipPath: 'inset(0 100% 0 0)',
                    duration: TIMING.clipDuration,
                    ease: TIMING.clipEase,
                    scrollTrigger: {
                        trigger: 'body',
                        start: `${logoShrinkEnd * TIMING.clipTriggerPoint}vh top`,
                        end: `${logoShrinkEnd * TIMING.clipTriggerPoint + 10}vh top`,
                        toggleActions: 'play none reverse none',
                        invalidateOnRefresh: true,
                    }
                });
            }

            // VIEW SELECTED WORK clip path - LEFT TO RIGHT (opposite of logo)
            const viewSelectedWork = document.querySelector('.view-selected-work');
            if (viewSelectedWork) {
                gsap.to('.view-selected-work', {
                    clipPath: 'inset(0 0 0 100%)', // Left to right wipe
                    duration: TIMING.clipDuration,
                    ease: TIMING.clipEase,
                    scrollTrigger: {
                        trigger: 'body',
                        start: `${logoShrinkEnd * TIMING.clipTriggerPoint}vh top`,
                        end: `${logoShrinkEnd * TIMING.clipTriggerPoint + 10}vh top`,
                        toggleActions: 'play none reverse none',
                        invalidateOnRefresh: true,
                    }
                });
            }

            // Marquee: slides in at same time as logo shrinks, completes at page end
            gsap.fromTo('.marquee-track',
                { 
                    x: viewportWidth
                },
                { 
                    x: -totalDistance,
                    ease: 'none',
                    scrollTrigger: {
                        trigger: 'body',
                        start: 'top top',
                        end: 'bottom bottom',
                        scrub: TIMING.marqueeScrub,
                        invalidateOnRefresh: true,
                    }
                }
            );
            
            // Make marquee visible after positioning
            track.classList.add('initialized');
            
            ScrollTrigger.refresh();
        }
        
        // Initial setup
        setupAnimations();
        
        // ENTRY ANIMATION: Clip-path reveal on page load
        // Set initial clipped state immediately to prevent flash
        gsap.set('.logo-container', { clipPath: 'inset(0 100% 0 0)' });
        
        const scrollHintEl = document.querySelector('.scroll-hint');
        if (scrollHintEl) {
            gsap.set('.scroll-hint', { clipPath: 'inset(0 100% 0 0)' });
        }

        const viewSelectedWorkEl = document.querySelector('.view-selected-work');
        if (viewSelectedWorkEl) {
            gsap.set('.view-selected-work', { clipPath: 'inset(0 100% 0 0)' }); // Start clipped left to right
        }
        
        // Then animate to fully revealed
        gsap.to('.logo-container', {
            clipPath: 'inset(0 0% 0 0)',
            duration: TIMING.entryDuration,
            ease: TIMING.entryEase,
            delay: TIMING.entryDelay
        });

        if (scrollHintEl) {
            gsap.to('.scroll-hint', {
                clipPath: 'inset(0 0% 0 0)',
                duration: TIMING.entryDuration,
                ease: TIMING.entryEase,
                delay: TIMING.entryDelay
            });
        }

        if (viewSelectedWorkEl) {
            gsap.to('.view-selected-work', {
                clipPath: 'inset(0 0% 0 0)',
                duration: TIMING.entryDuration,
                ease: TIMING.entryEase,
                delay: TIMING.entryDelay
            });
        }

        const lenis = new Lenis({
            duration: 1.2,
            easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
            orientation: 'vertical',
            smoothWheel: true,
            wheelMultiplier: 1,
            smoothTouch: false,
            touchMultiplier: 2,
        });

        lenis.on('scroll', ScrollTrigger.update);

        function raf(time) {
            lenis.raf(time);
            requestAnimationFrame(raf);
        }
        requestAnimationFrame(raf);

        // Debounced resize handler
        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(() => {
                // Kill all scroll triggers
                ScrollTrigger.getAll().forEach(st => st.kill());
                
                // Reset logo to default state before recalculating
                gsap.set('.logo-container', { 
                    scale: 1, 
                    clipPath: 'inset(0 0 0 0)' 
                });
                
                // Reset scroll hint if it exists
                const scrollHintResize = document.querySelector('.scroll-hint');
                if (scrollHintResize) {
                    gsap.set('.scroll-hint', { 
                        clipPath: 'inset(0 0 0 0)' 
                    });
                }

                // Reset view selected work if it exists
                const viewSelectedWorkResize = document.querySelector('.view-selected-work');
                if (viewSelectedWorkResize) {
                    gsap.set('.view-selected-work', { 
                        clipPath: 'inset(0 0 0 0)' 
                    });
                }
                
                // Recalculate and refresh
                setupAnimations();
                
                // Force ScrollTrigger to update based on current scroll position
                ScrollTrigger.refresh(true);
            }, 250);
        });
    } else {
        // ========================================
        // MOBILE: Logo intro clipPath animation ONLY
        // No scroll behavior, just entry reveal
        // ========================================
        console.log('MOBILE: Running mobile setup');
        
        const mobileLogo = document.querySelector('.logo-container');
        if (mobileLogo) {
            // Set initial clipped state
            gsap.set(mobileLogo, { 
                clipPath: 'inset(0 100% 0 0)',
                clearProps: 'transform,scale' // Clear any other props
            });
            console.log('MOBILE: Set logo initial clipPath');
            
            // Animate to fully revealed - ONLY ONCE on page load
            gsap.to(mobileLogo, {
                clipPath: 'inset(0 0% 0 0)',
                duration: 1.5,
                ease: 'power2.out',
                delay: 0.3,
                onStart: () => console.log('MOBILE: Logo reveal started'),
                onUpdate: function() {
                    console.log('MOBILE: Animation progress:', this.progress());
                },
                onComplete: () => {
                    console.log('MOBILE: Logo reveal complete');
                    console.log('MOBILE: Final clipPath:', mobileLogo.style.clipPath);
                }
            });
        }
        
        // Mobile: duplicate marquee track for infinite loop
        const track = document.querySelector('.marquee-track');
        if (track && !track.dataset.duplicated) {
            const clone = track.innerHTML;
            track.innerHTML = track.innerHTML + clone;
            track.dataset.duplicated = 'true';
            console.log('MOBILE: Marquee duplicated');
        }
    }
    }); // End DOMContentLoaded

    // Handle resize between mobile and desktop
    let lastIsDesktop = isDesktop;
    window.addEventListener('resize', () => {
        const nowIsDesktop = mediaQuery.matches;
        
        // If switching from mobile to desktop, remove duplicates
        if (!lastIsDesktop && nowIsDesktop) {
            const track = document.querySelector('.marquee-track');
            if (track && track.dataset.duplicated) {
                const children = Array.from(track.children);
                const halfLength = Math.floor(children.length / 2);
                children.slice(halfLength).forEach(child => child.remove());
                delete track.dataset.duplicated;
            }
        }
        
        // If switching from desktop to mobile, add duplicates
        if (lastIsDesktop && !nowIsDesktop) {
            const track = document.querySelector('.marquee-track');
            if (track && !track.dataset.duplicated) {
                const clone = track.innerHTML;
                track.innerHTML = track.innerHTML + clone;
                track.dataset.duplicated = 'true';
            }
        }
        
        lastIsDesktop = nowIsDesktop;
        isDesktop = nowIsDesktop;
    });
</script>