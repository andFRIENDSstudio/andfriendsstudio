---
// ScrollAnimations.astro - Desktop scroll animations
---

<script>
    import gsap from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    import Lenis from 'lenis';
    
    gsap.registerPlugin(ScrollTrigger);

    const isDesktop = window.innerWidth > 768;

    // AGGRESSIVE scroll reset - fire immediately and on load
    const resetScroll = () => {
        if ('scrollRestoration' in window.history) {
            window.history.scrollRestoration = 'manual';
        }
        document.documentElement.scrollTop = 0;
        document.body.scrollTop = 0;
        window.scrollTo(0, 0);
    };
    
    // Fire immediately
    resetScroll();
    
    // Fire on page show (catches back/forward navigation)
    window.addEventListener('pageshow', resetScroll);
    
    // Fire on load
    window.addEventListener('load', resetScroll);

    if (isDesktop) {
        // Calculate marquee dimensions first
        const track = document.querySelector('.marquee-track');
        
        // ========================================
        // TIMING CONFIGURATION - Adjust these to tune animations
        // ========================================
        const TIMING = {
            // Scroll scrub values (higher = smoother/floatier, lower = snappier)
            logoScrub: 3,
            marqueeScrub: 3,
            
            // Logo clip path animation
            clipDuration: 1.2,
            clipTriggerPoint: 0.25, // 0-1, when during logo shrink it triggers (0.25 = 25% through)
            clipEase: 'power2.inOut',
            
            // Entry animation on page load
            entryDuration: 1.5,
            entryDelay: 0.3,
            entryEase: 'power2.out',
        };
        // ========================================
        
        // Function to recalculate on resize
        function setupAnimations() {
            // Kill existing ScrollTriggers to refresh
            ScrollTrigger.getAll().forEach(st => st.kill());
            
            const trackWidth = track.scrollWidth;
            const viewportWidth = window.innerWidth;
            const paddingRight = viewportWidth * 0.05;
            const totalDistance = trackWidth - viewportWidth + paddingRight;

            // RESPONSIVE: Scale page height based on viewport width
            const basePageHeight = 600;
            const viewportScale = viewportWidth / 1920;
            const pageHeight = basePageHeight * Math.max(0.7, viewportScale);
            
            document.body.style.minHeight = `${pageHeight}vh`;

            // ADAPTIVE TIMING: Wider screens = more overlap, narrower = less overlap
            const widthRatio = Math.min(Math.max(viewportWidth / 1920, 0.5), 1);
            
            const logoShrinkEnd = pageHeight * gsap.utils.interpolate(0.75, 0.65, widthRatio);
            // Marquee starts at same time as logo shrink
            const marqueeStart = 0; // Changed from pageHeight * 0.25-0.35

            // Logo scale - scrubs with scroll
            const logoTimeline = gsap.timeline({
                scrollTrigger: {
                    trigger: 'body',
                    start: 'top top',
                    end: `${logoShrinkEnd}vh top`,
                    scrub: TIMING.logoScrub,
                    invalidateOnRefresh: true,
                }
            });

            // ADAPTIVE SCALE: Smaller viewports = less shrinking
            const targetScale = gsap.utils.interpolate(0.8, 0.45, widthRatio);

            logoTimeline.to('.logo-container', {
                scale: targetScale,
                ease: 'none',
            });

            // Logo clip path - triggers at a point, then animates independently
            gsap.to('.logo-container', {
                clipPath: 'inset(0 85% 0 0)',
                duration: TIMING.clipDuration,
                ease: TIMING.clipEase,
                scrollTrigger: {
                    trigger: 'body',
                    start: `${logoShrinkEnd * TIMING.clipTriggerPoint}vh top`,
                    end: `${logoShrinkEnd * TIMING.clipTriggerPoint + 10}vh top`,
                    toggleActions: 'play none reverse none',
                    invalidateOnRefresh: true,
                }
            });

            // Marquee: slides in at same time as logo shrinks, completes at page end
            gsap.fromTo('.marquee-track',
                { 
                    x: viewportWidth
                },
                { 
                    x: -totalDistance,
                    ease: 'none',
                    scrollTrigger: {
                        trigger: 'body',
                        start: 'top top',
                        end: 'bottom bottom',
                        scrub: TIMING.marqueeScrub,
                        invalidateOnRefresh: true,
                    }
                }
            );
            
            // Make marquee visible after positioning
            track.classList.add('initialized');
            
            ScrollTrigger.refresh();
        }
        
        // Initial setup
        setupAnimations();
        
        // ENTRY ANIMATION: Clip-path reveal on page load
        // Set initial clipped state immediately to prevent flash
        gsap.set('.logo-container', { clipPath: 'inset(0 100% 0 0)' });
        
        // Then animate to fully revealed
        gsap.to('.logo-container', {
            clipPath: 'inset(0 0% 0 0)',
            duration: TIMING.entryDuration,
            ease: TIMING.entryEase,
            delay: TIMING.entryDelay
        });

        const lenis = new Lenis({
            duration: 1.2,
            easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
            orientation: 'vertical',
            smoothWheel: true,
            wheelMultiplier: 1,
            smoothTouch: false,
            touchMultiplier: 2,
        });

        lenis.on('scroll', ScrollTrigger.update);

        function raf(time) {
            lenis.raf(time);
            requestAnimationFrame(raf);
        }
        requestAnimationFrame(raf);

        // Debounced resize handler
        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(() => {
                // Kill all scroll triggers
                ScrollTrigger.getAll().forEach(st => st.kill());
                
                // Reset logo to default state before recalculating
                gsap.set('.logo-container', { 
                    scale: 1, 
                    clipPath: 'inset(0 0 0 0)' 
                });
                
                // Recalculate and refresh
                setupAnimations();
                
                // Force ScrollTrigger to update based on current scroll position
                ScrollTrigger.refresh(true);
            }, 250);
        });
    } else {
        // Mobile: duplicate marquee track for infinite loop
        const track = document.querySelector('.marquee-track');
        if (track) {
            const clone = track.innerHTML;
            track.innerHTML = track.innerHTML + clone;
        }
    }
</script>