---
// ScrollAnimations.astro - Desktop scroll animations + Mobile GSAP Observer
---

<script>
    import gsap from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    import { Observer } from 'gsap/Observer';
    import Lenis from 'lenis';
    
    gsap.registerPlugin(ScrollTrigger, Observer);

    const isDesktop = window.innerWidth > 768;

    // AGGRESSIVE scroll reset - fire immediately and on load
    const resetScroll = () => {
        if ('scrollRestoration' in window.history) {
            window.history.scrollRestoration = 'manual';
        }
        document.documentElement.scrollTop = 0;
        document.body.scrollTop = 0;
        window.scrollTo(0, 0);
    };
    
    // Fire immediately
    resetScroll();
    
    // Fire on page show (catches back/forward navigation)
    window.addEventListener('pageshow', resetScroll);
    
    // Fire on load
    window.addEventListener('load', resetScroll);

    // ========================================
    // LOGO CLIPPATH INTRO
    // ========================================
    const INTRO_TIMING = {
        duration: 1.5,
        delay: 0.3,
        ease: 'power2.out',
    };

    // Set initial clipped state immediately to prevent flash
    gsap.set('.logo-container', { clipPath: 'inset(0 100% 0 0)' });
    
    const scrollHintEl = document.querySelector('.scroll-hint');
    if (scrollHintEl && isDesktop) {
        gsap.set('.scroll-hint', { clipPath: 'inset(0 100% 0 0)' });
    }
    
    // Then animate to fully revealed
    gsap.to('.logo-container', {
        clipPath: 'inset(0 0% 0 0)',
        duration: INTRO_TIMING.duration,
        ease: INTRO_TIMING.ease,
        delay: INTRO_TIMING.delay
    });

    if (scrollHintEl && isDesktop) {
        gsap.to('.scroll-hint', {
            clipPath: 'inset(0 0% 0 0)',
            duration: INTRO_TIMING.duration,
            ease: INTRO_TIMING.ease,
            delay: INTRO_TIMING.delay
        });
    }

    // ========================================
    // DESKTOP ANIMATIONS
    // ========================================
    if (isDesktop) {
        const track = document.querySelector('.marquee-track');
        
        const TIMING = {
            logoScrub: 3,
            marqueeScrub: 3,
            clipDuration: 1.2,
            clipTriggerPoint: 0.25,
            clipEase: 'power2.inOut',
        };
        
        function setupAnimations() {
            ScrollTrigger.getAll().forEach(st => st.kill());
            
            const trackWidth = track.scrollWidth;
            const viewportWidth = window.innerWidth;
            const paddingRight = viewportWidth * 0.05;
            const totalDistance = trackWidth - viewportWidth + paddingRight;

            const basePageHeight = 600;
            const viewportScale = viewportWidth / 1920;
            const pageHeight = basePageHeight * Math.max(0.7, viewportScale);
            
            document.body.style.minHeight = `${pageHeight}vh`;

            const widthRatio = Math.min(Math.max(viewportWidth / 1920, 0.5), 1);
            
            const logoShrinkEnd = pageHeight * gsap.utils.interpolate(0.75, 0.65, widthRatio);

            const logoTimeline = gsap.timeline({
                scrollTrigger: {
                    trigger: 'body',
                    start: 'top top',
                    end: `${logoShrinkEnd}vh top`,
                    scrub: TIMING.logoScrub,
                    invalidateOnRefresh: true,
                }
            });

            const targetScale = gsap.utils.interpolate(0.8, 0.45, widthRatio);

            logoTimeline.to('.logo-container', {
                scale: targetScale,
                ease: 'none',
            });

            // Scroll-triggered clippath removed - logo only animates on intro

            gsap.fromTo('.marquee-track',
                { 
                    x: viewportWidth
                },
                { 
                    x: -totalDistance,
                    ease: 'none',
                    scrollTrigger: {
                        trigger: 'body',
                        start: 'top top',
                        end: 'bottom bottom',
                        scrub: TIMING.marqueeScrub,
                        invalidateOnRefresh: true,
                    }
                }
            );
            
            track.classList.add('initialized');
            
            ScrollTrigger.refresh();
        }
        
        setupAnimations();

        const lenis = new Lenis({
            duration: 1.2,
            easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
            orientation: 'vertical',
            smoothWheel: true,
            wheelMultiplier: 1,
            smoothTouch: false,
            touchMultiplier: 2,
        });

        lenis.on('scroll', ScrollTrigger.update);

        function raf(time) {
            lenis.raf(time);
            requestAnimationFrame(raf);
        }
        requestAnimationFrame(raf);

        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(() => {
                ScrollTrigger.getAll().forEach(st => st.kill());
                
                gsap.set('.logo-container', { 
                    scale: 1, 
                    clipPath: 'inset(0 0 0 0)' 
                });
                
                if (scrollHintEl) {
                    gsap.set('.scroll-hint', { 
                        clipPath: 'inset(0 0 0 0)' 
                    });
                }
                
                setupAnimations();
                
                ScrollTrigger.refresh(true);
            }, 250);
        });
    } 
    
    // ========================================
    // MOBILE ANIMATIONS
    // ========================================
    else {
        const container = document.querySelector('.marquee-wrapper');
        const track = document.querySelector('.marquee-track');
        
        if (container && track) {
            const half = track.clientWidth / 2;
            const wrap = gsap.utils.wrap(-half, 0);
            
            // Base auto-scroll speed (15-20s per full loop = medium browsable)
            const autoScrollSpeed = 0.5; // pixels per frame at 60fps (~17s for typical content)
            
            let total = 0;
            let autoScrollOffset = 0;
            
            // Auto-scroll animation loop
            function autoScroll() {
                autoScrollOffset -= autoScrollSpeed;
                total = autoScrollOffset;
                gsap.set(track, { x: wrap(total) });
                requestAnimationFrame(autoScroll);
            }
            
            // Start auto-scroll
            autoScroll();
            
            // Use GSAP Observer for drag control
            Observer.create({
                target: container,
                type: "touch,pointer",
                onDrag: (self) => {
                    // Add drag delta to current position (additive control)
                    total += self.deltaX;
                    autoScrollOffset = total; // Update auto-scroll to continue from here
                    gsap.set(track, { x: wrap(total) });
                },
            });
            
            // Make track visible
            track.style.opacity = '1';
        }
    }
</script>