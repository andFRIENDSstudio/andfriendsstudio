---
// DVDLogo.astro - WebGL DVD-style bouncing logo with PNG texture and color changes
---

<canvas id="dvd-logo-canvas"></canvas>

<style>
  #dvd-logo-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100svw;
    height: 100svh;
    pointer-events: none;
    z-index: 9998;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  #dvd-logo-canvas.active {
    opacity: 1;
  }
</style>

<script>
  import logoTexture from '../assets/FRIENDS_Icon_Blk_v002.png';

  const canvas = document.getElementById('dvd-logo-canvas') as HTMLCanvasElement;
  const gl = canvas.getContext('webgl2', { 
    alpha: true, 
    antialias: true,
    powerPreference: 'high-performance'
  });

  if (!gl) {
    console.warn('WebGL2 not supported');
  }

  // Brand color progression
  const COLORS = [
    [0.937, 0.224, 0.161], // Red #EF3929
    [0.847, 0.635, 0.796], // Pink #D8A2CB
    [0.996, 0.573, 0.0],   // Orange #FE9200
    [0.333, 0.129, 0.655], // Purple #5521A7
    [0.890, 0.965, 0.027], // Yellow-Green #E3F607
    [0.043, 0.294, 0.898], // Blue #0B4BE5
    [0.008, 0.780, 0.475], // Green/Cyan #02C779
  ];

  // Vertex shader
  const vertexShaderSource = `#version 300 es
    precision highp float;
    
    in vec2 a_position;
    in vec2 a_texCoord;
    
    uniform vec2 u_resolution;
    uniform vec2 u_translation;
    uniform vec2 u_scale;
    
    out vec2 v_texCoord;
    
    void main() {
      vec2 pos = a_position * u_scale + u_translation;
      vec2 clipSpace = (pos / u_resolution) * 2.0 - 1.0;
      clipSpace.y *= -1.0;
      
      gl_Position = vec4(clipSpace, 0.0, 1.0);
      v_texCoord = a_texCoord;
    }
  `;

  // Fragment shader with texture and color tint
  const fragmentShaderSource = `#version 300 es
    precision highp float;
    
    in vec2 v_texCoord;
    
    uniform sampler2D u_texture;
    uniform vec3 u_color;
    
    out vec4 outColor;
    
    void main() {
      vec4 texColor = texture(u_texture, v_texCoord);
      
      // Tint the black areas with color
      float luminance = dot(texColor.rgb, vec3(0.299, 0.587, 0.114));
      vec3 finalColor = mix(u_color, texColor.rgb, luminance);
      
      outColor = vec4(finalColor, texColor.a);
    }
  `;

  // Compile shader
  function createShader(type: number, source: string) {
    if (!gl) return null;
    const shader = gl.createShader(type);
    if (!shader) return null;
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.error('Shader compile error:', gl.getShaderInfoLog(shader));
      gl.deleteShader(shader);
      return null;
    }
    return shader;
  }

  // Create program
  function createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {
    if (!gl) return null;
    const program = gl.createProgram();
    if (!program) return null;
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      console.error('Program link error:', gl.getProgramInfoLog(program));
      gl.deleteProgram(program);
      return null;
    }
    return program;
  }

  // Setup WebGL
  const vertexShader = createShader(gl.VERTEX_SHADER, vertexShaderSource);
  const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentShaderSource);
  
  if (!vertexShader || !fragmentShader) {
    console.error('Failed to create shaders');
  }

  const program = vertexShader && fragmentShader ? createProgram(vertexShader, fragmentShader) : null;

  if (!program) {
    console.error('Failed to create WebGL program');
  }

  // Get locations
  const positionLoc = gl.getAttribLocation(program!, 'a_position');
  const texCoordLoc = gl.getAttribLocation(program!, 'a_texCoord');
  const resolutionLoc = gl.getUniformLocation(program!, 'u_resolution');
  const translationLoc = gl.getUniformLocation(program!, 'u_translation');
  const scaleLoc = gl.getUniformLocation(program!, 'u_scale');
  const colorLoc = gl.getUniformLocation(program!, 'u_color');
  const textureLoc = gl.getUniformLocation(program!, 'u_texture');

  // Create quad vertices
  const QUAD_VERTICES = new Float32Array([
    // Position  // TexCoord
    0.0, 0.0,    0.0, 0.0,
    0.0, 1.0,    0.0, 1.0,
    1.0, 1.0,    1.0, 1.0,
    
    1.0, 1.0,    1.0, 1.0,
    1.0, 0.0,    1.0, 0.0,
    0.0, 0.0,    0.0, 0.0,
  ]);

  // Create vertex buffer
  const vertexBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, QUAD_VERTICES, gl.STATIC_DRAW);

  // Load texture
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  
  // Set temporary 1x1 white pixel while loading
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255, 255]));
  
  const textureImage = new Image();
  textureImage.onload = () => {
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);
    gl.generateMipmap(gl.TEXTURE_2D);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  };
  textureImage.src = logoTexture.src;

  // VAO
  const vao = gl.createVertexArray();
  gl.bindVertexArray(vao);

  // Setup vertex attributes
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
  
  // Position attribute
  gl.enableVertexAttribArray(positionLoc);
  gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 16, 0);
  
  // TexCoord attribute
  gl.enableVertexAttribArray(texCoordLoc);
  gl.vertexAttribPointer(texCoordLoc, 2, gl.FLOAT, false, 16, 8);

  // DVD Logo constants
  const LOGO_SCALE = 150; // Size in pixels
  const LOGO_ASPECT = 269 / 358; // From PNG dimensions
  const SPEED = 2;

  class DVDLogo {
    x: number;
    y: number;
    vx: number;
    vy: number;
    width: number;
    height: number;
    colorIndex: number;

    constructor(canvasWidth: number, canvasHeight: number) {
      this.width = LOGO_SCALE * LOGO_ASPECT;
      this.height = LOGO_SCALE;
      this.x = Math.random() * (canvasWidth - this.width);
      this.y = Math.random() * (canvasHeight - this.height);
      this.vx = SPEED;
      this.vy = SPEED;
      this.colorIndex = Math.floor(Math.random() * COLORS.length);
    }

    update(canvasWidth: number, canvasHeight: number) {
      this.x += this.vx;
      this.y += this.vy;

      let hitWall = false;
      
      // Left or right wall
      if (this.x <= 0 || this.x + this.width >= canvasWidth) {
        this.vx = -this.vx;
        this.x = Math.max(0, Math.min(this.x, canvasWidth - this.width));
        hitWall = true;
      }
      
      // Top or bottom wall
      if (this.y <= 0 || this.y + this.height >= canvasHeight) {
        this.vy = -this.vy;
        this.y = Math.max(0, Math.min(this.y, canvasHeight - this.height));
        hitWall = true;
      }

      // Change color on wall hit
      if (hitWall) {
        this.colorIndex = (this.colorIndex + 1) % COLORS.length;
      }
    }

    getColor() {
      return COLORS[this.colorIndex];
    }
  }

  let logo: DVDLogo | null = null;
  let animationId: number;

  // Resize handler
  function resize() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    gl.viewport(0, 0, canvas.width, canvas.height);
  }
  resize();
  window.addEventListener('resize', resize);

  // Render function
  function animate() {
    if (!logo) return;

    // Update logo
    logo.update(canvas.width, canvas.height);

    // Clear canvas
    gl.clearColor(0, 0, 0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);

    // Draw
    gl.useProgram(program);
    gl.bindVertexArray(vao);
    
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

    gl.uniform2f(resolutionLoc, canvas.width, canvas.height);
    gl.uniform2f(translationLoc, logo.x, logo.y);
    gl.uniform2f(scaleLoc, logo.width, logo.height);
    gl.uniform3fv(colorLoc, logo.getColor());
    
    // Bind texture
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.uniform1i(textureLoc, 0);

    gl.drawArrays(gl.TRIANGLES, 0, 6);

    animationId = requestAnimationFrame(animate);
  }

  // Public API
  (window as any).startDVDLogo = () => {
    canvas.classList.add('active');
    logo = new DVDLogo(canvas.width, canvas.height);
    animate();
  };

  (window as any).stopDVDLogo = () => {
    canvas.classList.remove('active');
    if (animationId) cancelAnimationFrame(animationId);
    logo = null;
    gl.clearColor(0, 0, 0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);
  };
</script>